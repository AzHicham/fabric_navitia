pipeline {
    agent {
        docker {
            image 'python:3.8-slim'
            args '--user root'
        }
    }
    stages {
        stage('Install extra packages') {
            steps {
                sh '''
                    echo "install extra packages"
                    apt update
                    apt install -y curl git unzip python python3-pip
                '''
            }
        }
        stage('Retreive core_team_ci_tools') {
            steps {
              withCredentials([usernamePassword(credentialsId: 'jenkins-app-core', usernameVariable: 'GITHUB_APP', passwordVariable: 'GITHUB_TOKEN')]) {
                    sh 'rm -rf core_team_ci_tools && mkdir -p core_team_ci_tools'
                    sh 'git clone https://${GITHUB_APP}:${GITHUB_TOKEN}@github.com/CanalTP/core_team_ci_tools.git'
                }
            }
        }
        stage('Install requirement to retreive Github artifacts') {
            steps {
                sh '''
                    pip install -r core_team_ci_tools/github_artifacts/requirements.txt
                '''
            }
        }
        stage('process navitia debian packages') {
            steps {
              withCredentials([usernamePassword(credentialsId: 'jenkins-app-core', usernameVariable: 'GITHUB_APP', passwordVariable: 'GITHUB_TOKEN')]) {
                    sh '''
                        for i in 8 10 11
                        do
                            echo "retreive debian $i packages for github_artifacts (workflow : Build Navitia Packages For Release)"
                            python core_team_ci_tools/github_artifacts/github_artifacts.py -o CanalTP -r navitia -t $GITHUB_TOKEN -w build_navitia_packages_for_release.yml -a navitia-debian$i-packages.zip -b release --waiting
                        done
                    '''
                }
            }
        }
        stage('unzip navitia debian packages bundle') {
            steps {
                sh '''
                    # unzip github artifacts
                    for i in 8 10 11
                    do
                        echo "Unzip artifacts for debian$i"
                        mkdir navitia_debian_$i
                        unzip -q navitia-debian$i-packages.zip -d navitia_debian_$i
                        echo "Unzip .deb for debian$i"
                        unzip -q ./navitia_debian_$i/navitia_debian* -d ./navitia_debian_$i 2>&1
                    done
                '''
            }
        }
        stage('copy on FTP') {
            steps {
                withCredentials([string(credentialsId: 'navitia_internal_debian8_repository', variable: 'DEBIAN8_REPO')]) {
                    sshagent(credentials : ['jenkins-core-ssh']) {
                        script {
                            echo 'copy debian 8 packages'
                            sh '''
                                echo "Unzip artifacts for debian$i"
                                cd ./navitia_debian_8
                                scp -o StrictHostKeyChecking=no navitia-* $DEBIAN8_REPO
                            '''
                        }
                    }
                }
            }
        }
        stage('copy on Nexus repository APT') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'navitia_core_debian_apt_nexus_repo', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    script {
                            sh '''
                                for os in "8 jessie" "10 buster" "11 bullseye"
                                do
                                  set -- $os
                                  echo 'Upload debian $1 ($2) packages'
                                  for f in ./navitia_debian_$1/navitia-*.deb; do
                                    STATUSCODE=$(curl --silent --output /dev/stderr --write-out "%{http_code}" -u "$USERNAME:$PASSWORD" -H "Content-Type: multipart/form-data" --data-binary \"@$f\" -k "https://pft-prd-nexus01.canaltp.prod/repository/navitia_$2/")
                                    if [ $STATUSCODE != 201 || $STATUSCODE != 200 ]; then
                                        exit 1
                                    fi
                                  done
                                done
                            '''
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
        cleanup {
            sh '''
                echo "remove downloaded artifacts"
                rm -rf ./navitia_debian_*
                rm -rf *.zip
            '''
        }
        success {
            withCredentials([string(credentialsId: 'navitia_core_team_slack_chan', variable: 'NAVITIA_CORE_TEAM_SLACK_CHAN')]) {
                sh '''
                    curl -X POST -H 'Content-type: application/json' --data '{"text":":octopus: Navitia Debian packages are available ! Good Job Team"}' $NAVITIA_CORE_TEAM_SLACK_CHAN
                '''
            }
        }
        failure {
            withCredentials([string(credentialsId: 'navitia_core_team_slack_chan', variable: 'NAVITIA_CORE_TEAM_SLACK_CHAN')]) {
                sh '''
                    curl -X POST -H 'Content-type: application/json' --data '{"text":":warning: Publish Navitia Debian packages failed ! See https://jenkins-core.canaltp.fr/job/publish_navitia_packages/"}' $NAVITIA_CORE_TEAM_SLACK_CHAN
                '''
            }
        }
    }
}
